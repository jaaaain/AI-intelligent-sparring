{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.sender\n    }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(message.sender) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(message.content), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.messageContent = $event),\n    placeholder: \"Type a message...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.messageContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"send\")]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$data","messages","message","key","sender","_createElementVNode","_toDisplayString","_createTextVNode","content","_cache","$event","messageContent","placeholder","onClick","args","$options","sendMessage"],"sources":["D:\\000Projects\\JAVA\\emp-train\\et-web\\src\\components\\WebSocketTest.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-for=\"message in messages\" :key=\"message.sender\">\n      <p><strong>{{ message.sender }}:</strong> {{ message.content }}</p>\n    </div>\n\n    <input v-model=\"messageContent\" placeholder=\"Type a message...\">\n    <button @click=\"sendMessage\">send</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: '',\n      messages: [],\n      messageContent: '',\n      websocket: null\n    };\n  },\n  mounted() {\n    connect();\n  },\n  methods: {\n    connect() {\n      let socketUrl = \"ws://localhost:8080/api/websocket/conversation/1\"\n      this.websocket = new WebSocket(socketUrl);\n      this.websocket.onmessage = function (message) {\n        console.log(message.data);\n      }\n    },\n    onMessageReceived(message) {\n      this.messages.push(message);\n    },\n    sendMessage() {\n      if (this.messageContent.trim()) {\n        const message = {\n          sender: this.username, // Assuming you have a username in `data`\n          content: this.messageContent\n        };\n        this.websocket.send(message); // websocket 发送消息\n        this.messages.push(message); // 消息历史\n        this.messageContent = ''; // 清空输入框\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAOM,e,kBANJA,mBAAA,CAEMC,SAAA,QAJVC,WAAA,CAE2BC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBL,mBAAA,CAEM;MAF4BM,GAAG,EAAED,OAAO,CAACE;QAC7CC,mBAAA,CAAmE,YAAhEA,mBAAA,CAAsC,gBAAAC,gBAAA,CAA3BJ,OAAO,CAACE,MAAM,IAAG,GAAC,iBAHtCG,gBAAA,CAG+C,GAAC,GAAAD,gBAAA,CAAGJ,OAAO,CAACM,OAAO,iB;kDAG9DH,mBAAA,CAAgE;IANpE,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMoBV,KAAA,CAAAW,cAAc,GAAAD,MAAA;IAAEE,WAAW,EAAC;iDAA5BZ,KAAA,CAAAW,cAAc,E,GAC9BN,mBAAA,CAA0C;IAAjCQ,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}