{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parse } from 'ipaddr.js';\nexport default {\n  data() {\n    return {\n      userid: 1,\n      username: \"小张\",\n      selectedOption: 1,\n      messages: [],\n      messageContent: '',\n      websocket: null\n    };\n  },\n  mounted() {},\n  methods: {\n    startTrain() {\n      this.connect(this.selectedOption, this.userid);\n    },\n    connect(selectedOption, userid) {\n      let socketUrl = `ws://localhost:8080/api/websocket/conversation/${userid}?option=${selectedOption}`;\n      this.websocket = new WebSocket(socketUrl);\n\n      // 使用箭头函数确保 `this` 指向 Vue 实例\n      this.websocket.onmessage = message => {\n        console.log(message.data);\n        console.log(JSON.stringify(this.messages));\n        this.onMessageReceived(message);\n      };\n    },\n    onMessageReceived(message) {\n      console.log(\"ok\");\n      try {\n        const parsedMessage = JSON.parse(message.data); // 解析 JSON 字符串\n        this.messages.push(parsedMessage); // 将解析后的消息加入 messages 数组\n      } catch (e) {\n        console.error(\"消息解析失败: \", e);\n      }\n    },\n    sendMessage() {\n      if (this.messageContent.trim()) {\n        const message = {\n          sender: this.username,\n          msg: this.messageContent\n        };\n        this.websocket.send(JSON.stringify(message)); // websocket 发送消息\n        this.messages.push(message); // 消息历史\n        console.log(JSON.stringify(this.messages));\n        this.messageContent = ''; // 清空输入框\n      }\n    }\n  }\n};","map":{"version":3,"names":["parse","data","userid","username","selectedOption","messages","messageContent","websocket","mounted","methods","startTrain","connect","socketUrl","WebSocket","onmessage","message","console","log","JSON","stringify","onMessageReceived","parsedMessage","push","e","error","sendMessage","trim","sender","msg","send"],"sources":["D:\\000Projects\\JAVA\\emp-train\\et-web\\src\\components\\WebSocketTest.vue"],"sourcesContent":["<template>\n  <div>\n    <label for=\"options\">请选择训练模式:</label>\n    <select v-model=\"selectedOption\" id=\"options\">\n      <option value=\"1\">模式1</option>\n      <option value=\"2\">模式2</option>\n      <option value=\"3\">模式3</option>\n      <option value=\"4\">模式4</option>\n    </select>\n    <button @click=\"startTrain\">开始训练</button>\n    \n    <input v-model=\"messageContent\" placeholder=\"Type a message...\">\n    <button @click=\"sendMessage\">send</button>\n\n    <div v-for=\"(message,index) in messages\" :key=\"index\">\n      <p><strong>{{ message.sender }}:</strong> {{ message.msg }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { parse } from 'ipaddr.js';\nexport default {\n  data() {\n    return {\n      userid: 1,\n      username:\"小张\",\n      selectedOption:1,\n      messages: [],\n      messageContent: '',\n      websocket: null\n    };\n  },\n  mounted() {\n  },\n  methods: {\n    startTrain(){\n      this.connect(this.selectedOption,this.userid);\n\n    },\n    connect(selectedOption, userid) {\n    let socketUrl = `ws://localhost:8080/api/websocket/conversation/${userid}?option=${selectedOption}`;\n    this.websocket = new WebSocket(socketUrl);\n\n    // 使用箭头函数确保 `this` 指向 Vue 实例\n    this.websocket.onmessage = (message) => {\n      console.log(message.data);\n      console.log(JSON.stringify(this.messages));\n      this.onMessageReceived(message);\n    };\n  },\n  \n  onMessageReceived(message) {\n    console.log(\"ok\");\n    try {\n      const parsedMessage = JSON.parse(message.data); // 解析 JSON 字符串\n      this.messages.push(parsedMessage); // 将解析后的消息加入 messages 数组\n    } catch (e) {\n      console.error(\"消息解析失败: \", e);\n    }\n  },\n    sendMessage() {\n      if (this.messageContent.trim()) {\n        const message = {\n          sender: this.username,\n          msg: this.messageContent\n        };\n        this.websocket.send(JSON.stringify(message)); // websocket 发送消息\n        this.messages.push(message); // 消息历史\n        console.log(JSON.stringify(this.messages));\n        this.messageContent = ''; // 清空输入框\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";AAqBA,SAASA,KAAI,QAAS,WAAW;AACjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,CAAC;MACTC,QAAQ,EAAC,IAAI;MACbC,cAAc,EAAC,CAAC;MAChBC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG,CACV,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAE;MACV,IAAI,CAACC,OAAO,CAAC,IAAI,CAACP,cAAc,EAAC,IAAI,CAACF,MAAM,CAAC;IAE/C,CAAC;IACDS,OAAOA,CAACP,cAAc,EAAEF,MAAM,EAAE;MAChC,IAAIU,SAAQ,GAAI,kDAAkDV,MAAM,WAAWE,cAAc,EAAE;MACnG,IAAI,CAACG,SAAQ,GAAI,IAAIM,SAAS,CAACD,SAAS,CAAC;;MAEzC;MACA,IAAI,CAACL,SAAS,CAACO,SAAQ,GAAKC,OAAO,IAAK;QACtCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAACd,IAAI,CAAC;QACzBe,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACd,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAACe,iBAAiB,CAACL,OAAO,CAAC;MACjC,CAAC;IACH,CAAC;IAEDK,iBAAiBA,CAACL,OAAO,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjB,IAAI;QACF,MAAMI,aAAY,GAAIH,IAAI,CAAClB,KAAK,CAACe,OAAO,CAACd,IAAI,CAAC,EAAE;QAChD,IAAI,CAACI,QAAQ,CAACiB,IAAI,CAACD,aAAa,CAAC,EAAE;MACrC,EAAE,OAAOE,CAAC,EAAE;QACVP,OAAO,CAACQ,KAAK,CAAC,UAAU,EAAED,CAAC,CAAC;MAC9B;IACF,CAAC;IACCE,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACnB,cAAc,CAACoB,IAAI,CAAC,CAAC,EAAE;QAC9B,MAAMX,OAAM,GAAI;UACdY,MAAM,EAAE,IAAI,CAACxB,QAAQ;UACrByB,GAAG,EAAE,IAAI,CAACtB;QACZ,CAAC;QACD,IAAI,CAACC,SAAS,CAACsB,IAAI,CAACX,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC,EAAE;QAC9C,IAAI,CAACV,QAAQ,CAACiB,IAAI,CAACP,OAAO,CAAC,EAAE;QAC7BC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACd,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAACC,cAAa,GAAI,EAAE,EAAE;MAC5B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}