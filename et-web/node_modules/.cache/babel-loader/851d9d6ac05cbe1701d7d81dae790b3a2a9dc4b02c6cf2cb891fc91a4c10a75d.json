{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"options\"\n  }, \"请选择训练模式:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedOption = $event),\n    id: \"options\"\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"option\", {\n    value: \"1\"\n  }, \"模式1\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"2\"\n  }, \"模式2\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"3\"\n  }, \"模式3\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"4\"\n  }, \"模式4\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedOption]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.startTrain && $options.startTrain(...args))\n  }, \"开始训练\"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.messageContent = $event),\n    placeholder: \"Type a message...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.messageContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"send\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(message.sender) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(message.msg), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","for","_cache","$event","$data","selectedOption","id","value","onClick","args","$options","startTrain","messageContent","placeholder","sendMessage","_Fragment","_renderList","messages","message","index","key","_toDisplayString","sender","_createTextVNode","msg"],"sources":["D:\\000Projects\\JAVA\\emp-train\\et-web\\src\\components\\WebSocketTest.vue"],"sourcesContent":["<template>\n  <div>\n    <label for=\"options\">请选择训练模式:</label>\n    <select v-model=\"selectedOption\" id=\"options\">\n      <option value=\"1\">模式1</option>\n      <option value=\"2\">模式2</option>\n      <option value=\"3\">模式3</option>\n      <option value=\"4\">模式4</option>\n    </select>\n    <button @click=\"startTrain\">开始训练</button>\n    \n    <input v-model=\"messageContent\" placeholder=\"Type a message...\">\n    <button @click=\"sendMessage\">send</button>\n\n    <div v-for=\"(message,index) in messages\" :key=\"index\">\n      <p><strong>{{ message.sender }}:</strong> {{ message.msg }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { parse } from 'ipaddr.js';\nexport default {\n  data() {\n    return {\n      userid: 1,\n      username:\"小张\",\n      selectedOption:1,\n      messages: [],\n      messageContent: '',\n      websocket: null\n    };\n  },\n  mounted() {\n  },\n  methods: {\n    startTrain(){\n      this.connect(this.selectedOption,this.userid);\n\n    },\n    connect(selectedOption,userid) {\n      let socketUrl = `ws://localhost:8080/api/websocket/conversation/${userid}?option=${selectedOption}`\n      this.websocket = new WebSocket(socketUrl);\n      this.websocket.onmessage = function (message) {\n        console.log(message.data);\n        console.log(JSON.stringify(this.messages));\n      }\n    },\n    onMessageReceived(message) {\n      \n      this.messages.push(message.data);    \n    },\n    sendMessage() {\n      if (this.messageContent.trim()) {\n        const message = {\n          sender: this.username,\n          msg: this.messageContent\n        };\n        this.websocket.send(JSON.stringify(message)); // websocket 发送消息\n        this.messages.push(message); // 消息历史\n        console.log(JSON.stringify(this.messages));\n        this.messageContent = ''; // 清空输入框\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAgBM,c,0BAfJC,mBAAA,CAAqC;IAA9BC,GAAG,EAAC;EAAS,GAAC,UAAQ,sB,gBAC7BD,mBAAA,CAKS;IARb,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGqBC,KAAA,CAAAC,cAAc,GAAAF,MAAA;IAAEG,EAAE,EAAC;gCAClCN,mBAAA,CAA8B;IAAtBO,KAAK,EAAC;EAAG,GAAC,KAAG,qBACrBP,mBAAA,CAA8B;IAAtBO,KAAK,EAAC;EAAG,GAAC,KAAG,qBACrBP,mBAAA,CAA8B;IAAtBO,KAAK,EAAC;EAAG,GAAC,KAAG,qBACrBP,mBAAA,CAA8B;IAAtBO,KAAK,EAAC;EAAG,GAAC,KAAG,oB,2CAJNH,KAAA,CAAAC,cAAc,E,GAM/BL,mBAAA,CAAyC;IAAhCQ,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,MAAI,G,gBAEhCT,mBAAA,CAAgE;IAXpE,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAWoBC,KAAA,CAAAQ,cAAc,GAAAT,MAAA;IAAEU,WAAW,EAAC;iDAA5BT,KAAA,CAAAQ,cAAc,E,GAC9BZ,mBAAA,CAA0C;IAAjCQ,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAI,WAAA,IAAAJ,QAAA,CAAAI,WAAA,IAAAL,IAAA,CAAW;KAAE,MAAI,I,kBAEjCV,mBAAA,CAEMgB,SAAA,QAhBVC,WAAA,CAcmCZ,KAAA,CAAAa,QAAQ,EAd3C,CAciBC,OAAO,EAACC,KAAK;yBAA1BpB,mBAAA,CAEM;MAFoCqB,GAAG,EAAED;IAAK,IAClDnB,mBAAA,CAA+D,YAA5DA,mBAAA,CAAsC,gBAAAqB,gBAAA,CAA3BH,OAAO,CAACI,MAAM,IAAG,GAAC,iBAftCC,gBAAA,CAe+C,GAAC,GAAAF,gBAAA,CAAGH,OAAO,CAACM,GAAG,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}