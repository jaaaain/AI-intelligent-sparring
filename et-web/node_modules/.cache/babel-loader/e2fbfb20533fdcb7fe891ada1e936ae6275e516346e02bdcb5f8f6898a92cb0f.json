{"ast":null,"code":"import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n  /**\n   * Create an instance.\n   */\n  constructor(conf = {}) {\n    /**\n     * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n     *\n     * Example:\n     * ```javascript\n     *        // Try only versions 1.1 and 1.0\n     *        client.stompVersions = new Versions(['1.1', '1.0'])\n     * ```\n     */\n    this.stompVersions = Versions.default;\n    /**\n     * Will retry if Stomp connection is not established in specified milliseconds.\n     * Default 0, which switches off automatic reconnection.\n     */\n    this.connectionTimeout = 0;\n    /**\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n     */\n    this.reconnectDelay = 5000;\n    /**\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n    this.heartbeatIncoming = 10000;\n    /**\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\n     * This switches on a non-standard behavior while sending WebSocket packets.\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n     * Only Java Spring brokers seem to support this mode.\n     *\n     * WebSockets, by itself, split large (text) packets,\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\n     * Setting it for such a broker will cause large messages to fail.\n     *\n     * `false` by default.\n     *\n     * Binary frames are never split.\n     */\n    this.splitLargeFrames = false;\n    /**\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\n     * Usually the\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n     * is automatically decided by type of the payload.\n     * Default is `false`, which should work with all compliant brokers.\n     *\n     * Set this flag to force binary frames.\n     */\n    this.forceBinaryWSFrames = false;\n    /**\n     * A bug in ReactNative chops a string on occurrence of a NULL.\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n     * This makes incoming WebSocket messages invalid STOMP packets.\n     * Setting this flag attempts to reverse the damage by appending a NULL.\n     * If the broker splits a large message into multiple WebSocket messages,\n     * this flag will cause data loss and abnormal termination of connection.\n     *\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\n     * Browsers do not immediately close WebSockets when `.close` is issued.\n     * This may cause reconnection to take a significantly long time in case\n     *  of some types of failures.\n     * In case of incoming heartbeat failure, this experimental flag instructs\n     * the library to discard the socket immediately\n     * (even before it is actually closed).\n     */\n    this.discardWebsocketOnCommFailure = false;\n    /**\n     * Activation state.\n     *\n     * It will usually be ACTIVE or INACTIVE.\n     * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n     */\n    this.state = ActivationState.INACTIVE;\n    // No op callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket() {\n    return this._stompHandler?._webSocket;\n  }\n  /**\n   * Disconnection headers.\n   */\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\n   * `true` if there is an active connection to STOMP Broker\n   */\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\n   * if the client is active (connected or going to reconnect)\n   */\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\n   * Update configuration.\n   */\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  activate() {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n      this._changeState(ActivationState.ACTIVE);\n      this._connect();\n    };\n    // if it is deactivating, wait for it to complete before activating.\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n  async _connect() {\n    await this.beforeConnect();\n    if (this._stompHandler) {\n      this.debug('There is already a stompHandler, skipping the call to connect');\n      return;\n    }\n    if (!this.active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n    // setup connection watcher\n    if (this.connectionTimeout > 0) {\n      // clear first\n      if (this._connectionWatcher) {\n        clearTimeout(this._connectionWatcher);\n      }\n      this._connectionWatcher = setTimeout(() => {\n        if (this.connected) {\n          return;\n        }\n        // Connection not established, close the underlying socket\n        // a reconnection will be attempted\n        this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n        this.forceDisconnect();\n      }, this.connectionTimeout);\n    }\n    this.debug('Opening Web Socket...');\n    // Get the actual WebSocket (or a similar object)\n    const webSocket = this._createWebSocket();\n    this._stompHandler = new StompHandler(this, webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this._disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      splitLargeFrames: this.splitLargeFrames,\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\n      logRawCommunication: this.logRawCommunication,\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n      discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n      onConnect: frame => {\n        // Successfully connected, stop the connection watcher\n        if (this._connectionWatcher) {\n          clearTimeout(this._connectionWatcher);\n          this._connectionWatcher = undefined;\n        }\n        if (!this.active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: frame => {\n        this.onDisconnect(frame);\n      },\n      onStompError: frame => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: evt => {\n        this._stompHandler = undefined; // a new one will be created in case of a reconnect\n        if (this.state === ActivationState.DEACTIVATING) {\n          // Mark deactivation complete\n          this._changeState(ActivationState.INACTIVE);\n        }\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        this.onWebSocketClose(evt);\n        if (this.active) {\n          this._schedule_reconnect();\n        }\n      },\n      onWebSocketError: evt => {\n        this.onWebSocketError(evt);\n      },\n      onUnhandledMessage: message => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: frame => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: frame => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n    this._stompHandler.start();\n  }\n  _createWebSocket() {\n    let webSocket;\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n  _schedule_reconnect() {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n   *\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\n   *\n   * It is not an error to invoke this method more than once.\n   * Each of those would resolve on completion of deactivation.\n   *\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\n   *\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\n   * In some cases, browsers take a long time in the Websocket shutdown\n   * if the underlying connection had gone stale.\n   * Using this mode can speed up.\n   * When this mode is used, the actual Websocket may linger for a while\n   * and the broker may not realize that the connection is no longer in use.\n   *\n   * It is possible to invoke this method initially without the `force` option\n   * and subsequently, say after a wait, with the `force` option.\n   */\n  async deactivate(options = {}) {\n    const force = options.force || false;\n    const needToDispose = this.active;\n    let retPromise;\n    if (this.state === ActivationState.INACTIVE) {\n      this.debug(`Already INACTIVE, nothing more to do`);\n      return Promise.resolve();\n    }\n    this._changeState(ActivationState.DEACTIVATING);\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n      this._reconnector = undefined;\n    }\n    if (this._stompHandler &&\n    // @ts-ignore - if there is a _stompHandler, there is the webSocket\n    this.webSocket.readyState !== StompSocketState.CLOSED) {\n      const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n      // we need to wait for the underlying websocket to close\n      retPromise = new Promise((resolve, reject) => {\n        // @ts-ignore - there is a _stompHandler\n        this._stompHandler.onWebSocketClose = evt => {\n          origOnWebSocketClose(evt);\n          resolve();\n        };\n      });\n    } else {\n      // indicate that auto reconnect loop should terminate\n      this._changeState(ActivationState.INACTIVE);\n      return Promise.resolve();\n    }\n    if (force) {\n      this._stompHandler?.discardWebsocket();\n    } else if (needToDispose) {\n      this._disposeStompHandler();\n    }\n    return retPromise;\n  }\n  /**\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n   * After forcing disconnect, automatic reconnect will be attempted.\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n   */\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body, use `binaryBody` parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages, `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect\n   * if the message body has NULL octet(s) and `content-length` header is missing.\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  publish(params) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.publish(params);\n  }\n  _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use.\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based on the value of the receipt-id.\n   *\n   * This method allows watching for a receipt and invoking the callback\n   *  when the corresponding receipt has been received.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  watchForReceipt(receiptId, callback) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\n   * received message with the {@link IMessage} as argument.\n   *\n   * Note: The library will generate a unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the `headers` argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  subscribe(destination, callback, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  unsubscribe(id, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n   * and [abort]{@link ITransaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  begin(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  commit(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.commit(transactionId);\n  }\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  abort(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.abort(transactionId);\n  }\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  ack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  nack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","map":{"version":3,"names":["StompHandler","ActivationState","StompSocketState","Versions","Client","constructor","conf","stompVersions","default","connectionTimeout","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","discardWebsocketOnCommFailure","state","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","onChangeState","connectHeaders","_disconnectHeaders","configure","webSocket","_stompHandler","_webSocket","disconnectHeaders","value","connected","connectedVersion","undefined","active","ACTIVE","_changeState","Object","assign","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","forceDisconnect","_createWebSocket","frame","_disposeStompHandler","evt","_schedule_reconnect","message","start","webSocketFactory","brokerURL","WebSocket","protocolVersions","Error","binaryType","_reconnector","options","force","needToDispose","retPromise","Promise","resolve","readyState","CLOSED","origOnWebSocketClose","reject","discardWebsocket","dispose","publish","params","_checkConnection","TypeError","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack"],"sources":["../src/client.ts"],"sourcesContent":[null],"mappings":"AAEA,SAASA,YAAY,QAAQ,oBAAoB;AAGjD,SACEC,eAAe,EAOfC,gBAAgB,QAEX,YAAY;AACnB,SAASC,QAAQ,QAAQ,eAAe;AAUxC;;;;;AAKA,OAAM,MAAOC,MAAM;EAyTjB;;;EAGAC,YAAYC,IAAA,GAAoB,EAAE;IA/SlC;;;;;;;;;IASO,KAAAC,aAAa,GAAGJ,QAAQ,CAACK,OAAO;IAyBvC;;;;IAIO,KAAAC,iBAAiB,GAAW,CAAC;IAKpC;;;IAGO,KAAAC,cAAc,GAAW,IAAI;IAEpC;;;IAGO,KAAAC,iBAAiB,GAAW,KAAK;IAExC;;;IAGO,KAAAC,iBAAiB,GAAW,KAAK;IAExC;;;;;;;;;;;;;IAaO,KAAAC,gBAAgB,GAAY,KAAK;IAExC;;;;IAIO,KAAAC,qBAAqB,GAAW,CAAC,GAAG,IAAI;IAE/C;;;;;;;;IAQO,KAAAC,mBAAmB,GAAY,KAAK;IAE3C;;;;;;;;;;IAUO,KAAAC,2BAA2B,GAAY,KAAK;IAyJnD;;;;;;;;IAQO,KAAAC,6BAA6B,GAAY,KAAK;IA8BrD;;;;;;IAMO,KAAAC,KAAK,GAAoBjB,eAAe,CAACkB,QAAQ;IAQtD;IACA,MAAMC,IAAI,GAAGA,CAAA,KAAK,CAAE,CAAC;IACrB,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB,IAAI,CAACE,aAAa,GAAGF,IAAI;IACzB,IAAI,CAACG,SAAS,GAAGH,IAAI;IACrB,IAAI,CAACI,YAAY,GAAGJ,IAAI;IACxB,IAAI,CAACK,kBAAkB,GAAGL,IAAI;IAC9B,IAAI,CAACM,kBAAkB,GAAGN,IAAI;IAC9B,IAAI,CAACO,gBAAgB,GAAGP,IAAI;IAC5B,IAAI,CAACQ,YAAY,GAAGR,IAAI;IACxB,IAAI,CAACS,gBAAgB,GAAGT,IAAI;IAC5B,IAAI,CAACU,gBAAgB,GAAGV,IAAI;IAC5B,IAAI,CAACW,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,aAAa,GAAGZ,IAAI;IAEzB;IACA,IAAI,CAACa,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAE5B;IACA,IAAI,CAACC,SAAS,CAAC7B,IAAI,CAAC;EACtB;EAhOA;;;EAGA,IAAI8B,SAASA,CAAA;IACX,OAAO,IAAI,CAACC,aAAa,EAAEC,UAAU;EACvC;EASA;;;EAGA,IAAIC,iBAAiBA,CAAA;IACnB,OAAO,IAAI,CAACL,kBAAkB;EAChC;EAEA,IAAIK,iBAAiBA,CAACC,KAAmB;IACvC,IAAI,CAACN,kBAAkB,GAAGM,KAAK;IAC/B,IAAI,IAAI,CAACH,aAAa,EAAE;MACtB,IAAI,CAACA,aAAa,CAACE,iBAAiB,GAAG,IAAI,CAACL,kBAAkB;;EAElE;EA+BA;;;EAGA,IAAIO,SAASA,CAAA;IACX,OAAO,CAAC,CAAC,IAAI,CAACJ,aAAa,IAAI,IAAI,CAACA,aAAa,CAACI,SAAS;EAC7D;EAmGA;;;EAGA,IAAIC,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAACL,aAAa,GAAG,IAAI,CAACA,aAAa,CAACK,gBAAgB,GAAGC,SAAS;EAC7E;EAIA;;;EAGA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC1B,KAAK,KAAKjB,eAAe,CAAC4C,MAAM;EAC9C;EASQC,YAAYA,CAAC5B,KAAsB;IACzC,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACc,aAAa,CAACd,KAAK,CAAC;EAC3B;EAuCA;;;EAGOiB,SAASA,CAAC7B,IAAiB;IAChC;IACCyC,MAAc,CAACC,MAAM,CAAC,IAAI,EAAE1C,IAAI,CAAC;EACpC;EAEA;;;;;;;EAOO2C,QAAQA,CAAA;IACb,MAAMC,SAAS,GAAGA,CAAA,KAAK;MACrB,IAAI,IAAI,CAACN,MAAM,EAAE;QACf,IAAI,CAACvB,KAAK,CAAC,8CAA8C,CAAC;QAC1D;;MAGF,IAAI,CAACyB,YAAY,CAAC7C,eAAe,CAAC4C,MAAM,CAAC;MAEzC,IAAI,CAACM,QAAQ,EAAE;IACjB,CAAC;IAED;IACA,IAAI,IAAI,CAACjC,KAAK,KAAKjB,eAAe,CAACmD,YAAY,EAAE;MAC/C,IAAI,CAAC/B,KAAK,CAAC,sDAAsD,CAAC;MAClE,IAAI,CAACgC,UAAU,EAAE,CAACC,IAAI,CAAC,MAAK;QAC1BJ,SAAS,EAAE;MACb,CAAC,CAAC;KACH,MAAM;MACLA,SAAS,EAAE;;EAEf;EAEQ,MAAMC,QAAQA,CAAA;IACpB,MAAM,IAAI,CAAC7B,aAAa,EAAE;IAE1B,IAAI,IAAI,CAACe,aAAa,EAAE;MACtB,IAAI,CAAChB,KAAK,CAAC,+DAA+D,CAAC;MAC3E;;IAGF,IAAI,CAAC,IAAI,CAACuB,MAAM,EAAE;MAChB,IAAI,CAACvB,KAAK,CACR,8DAA8D,CAC/D;MACD;;IAGF;IACA,IAAI,IAAI,CAACZ,iBAAiB,GAAG,CAAC,EAAE;MAC9B;MACA,IAAI,IAAI,CAAC8C,kBAAkB,EAAE;QAC3BC,YAAY,CAAC,IAAI,CAACD,kBAAkB,CAAC;;MAEvC,IAAI,CAACA,kBAAkB,GAAGE,UAAU,CAAC,MAAK;QACxC,IAAI,IAAI,CAAChB,SAAS,EAAE;UAClB;;QAEF;QACA;QACA,IAAI,CAACpB,KAAK,CACR,iCAAiC,IAAI,CAACZ,iBAAiB,oBAAoB,CAC5E;QACD,IAAI,CAACiD,eAAe,EAAE;MACxB,CAAC,EAAE,IAAI,CAACjD,iBAAiB,CAAC;;IAG5B,IAAI,CAACY,KAAK,CAAC,uBAAuB,CAAC;IAEnC;IACA,MAAMe,SAAS,GAAG,IAAI,CAACuB,gBAAgB,EAAE;IAEzC,IAAI,CAACtB,aAAa,GAAG,IAAIrC,YAAY,CAAC,IAAI,EAAEoC,SAAS,EAAE;MACrDf,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBd,aAAa,EAAE,IAAI,CAACA,aAAa;MACjC0B,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCM,iBAAiB,EAAE,IAAI,CAACL,kBAAkB;MAC1CvB,iBAAiB,EAAE,IAAI,CAACA,iBAAiB;MACzCC,iBAAiB,EAAE,IAAI,CAACA,iBAAiB;MACzCC,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCC,qBAAqB,EAAE,IAAI,CAACA,qBAAqB;MACjDC,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7CgB,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7Cf,2BAA2B,EAAE,IAAI,CAACA,2BAA2B;MAC7DC,6BAA6B,EAAE,IAAI,CAACA,6BAA6B;MAEjEM,SAAS,EAAEqC,KAAK,IAAG;QACjB;QACA,IAAI,IAAI,CAACL,kBAAkB,EAAE;UAC3BC,YAAY,CAAC,IAAI,CAACD,kBAAkB,CAAC;UACrC,IAAI,CAACA,kBAAkB,GAAGZ,SAAS;;QAGrC,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;UAChB,IAAI,CAACvB,KAAK,CACR,sEAAsE,CACvE;UACD,IAAI,CAACwC,oBAAoB,EAAE;UAC3B;;QAEF,IAAI,CAACtC,SAAS,CAACqC,KAAK,CAAC;MACvB,CAAC;MACDpC,YAAY,EAAEoC,KAAK,IAAG;QACpB,IAAI,CAACpC,YAAY,CAACoC,KAAK,CAAC;MAC1B,CAAC;MACDhC,YAAY,EAAEgC,KAAK,IAAG;QACpB,IAAI,CAAChC,YAAY,CAACgC,KAAK,CAAC;MAC1B,CAAC;MACD/B,gBAAgB,EAAEiC,GAAG,IAAG;QACtB,IAAI,CAACzB,aAAa,GAAGM,SAAS,CAAC,CAAC;QAEhC,IAAI,IAAI,CAACzB,KAAK,KAAKjB,eAAe,CAACmD,YAAY,EAAE;UAC/C;UACA,IAAI,CAACN,YAAY,CAAC7C,eAAe,CAACkB,QAAQ,CAAC;;QAG7C;QACA;QACA,IAAI,CAACU,gBAAgB,CAACiC,GAAG,CAAC;QAE1B,IAAI,IAAI,CAAClB,MAAM,EAAE;UACf,IAAI,CAACmB,mBAAmB,EAAE;;MAE9B,CAAC;MACDjC,gBAAgB,EAAEgC,GAAG,IAAG;QACtB,IAAI,CAAChC,gBAAgB,CAACgC,GAAG,CAAC;MAC5B,CAAC;MACDrC,kBAAkB,EAAEuC,OAAO,IAAG;QAC5B,IAAI,CAACvC,kBAAkB,CAACuC,OAAO,CAAC;MAClC,CAAC;MACDtC,kBAAkB,EAAEkC,KAAK,IAAG;QAC1B,IAAI,CAAClC,kBAAkB,CAACkC,KAAK,CAAC;MAChC,CAAC;MACDjC,gBAAgB,EAAEiC,KAAK,IAAG;QACxB,IAAI,CAACjC,gBAAgB,CAACiC,KAAK,CAAC;MAC9B;KACD,CAAC;IAEF,IAAI,CAACvB,aAAa,CAAC4B,KAAK,EAAE;EAC5B;EAEQN,gBAAgBA,CAAA;IACtB,IAAIvB,SAAuB;IAE3B,IAAI,IAAI,CAAC8B,gBAAgB,EAAE;MACzB9B,SAAS,GAAG,IAAI,CAAC8B,gBAAgB,EAAE;KACpC,MAAM,IAAI,IAAI,CAACC,SAAS,EAAE;MACzB/B,SAAS,GAAG,IAAIgC,SAAS,CACvB,IAAI,CAACD,SAAS,EACd,IAAI,CAAC5D,aAAa,CAAC8D,gBAAgB,EAAE,CACtC;KACF,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;;IAE1ElC,SAAS,CAACmC,UAAU,GAAG,aAAa;IACpC,OAAOnC,SAAS;EAClB;EAEQ2B,mBAAmBA,CAAA;IACzB,IAAI,IAAI,CAACrD,cAAc,GAAG,CAAC,EAAE;MAC3B,IAAI,CAACW,KAAK,CAAC,qCAAqC,IAAI,CAACX,cAAc,IAAI,CAAC;MAExE,IAAI,CAAC8D,YAAY,GAAGf,UAAU,CAAC,MAAK;QAClC,IAAI,CAACN,QAAQ,EAAE;MACjB,CAAC,EAAE,IAAI,CAACzC,cAAc,CAAC;;EAE3B;EAEA;;;;;;;;;;;;;;;;;;;;;;;EAuBO,MAAM2C,UAAUA,CAACoB,OAAA,GAA+B,EAAE;IACvD,MAAMC,KAAK,GAAYD,OAAO,CAACC,KAAK,IAAI,KAAK;IAC7C,MAAMC,aAAa,GAAG,IAAI,CAAC/B,MAAM;IACjC,IAAIgC,UAAyB;IAE7B,IAAI,IAAI,CAAC1D,KAAK,KAAKjB,eAAe,CAACkB,QAAQ,EAAE;MAC3C,IAAI,CAACE,KAAK,CAAC,sCAAsC,CAAC;MAClD,OAAOwD,OAAO,CAACC,OAAO,EAAE;;IAG1B,IAAI,CAAChC,YAAY,CAAC7C,eAAe,CAACmD,YAAY,CAAC;IAE/C;IACA,IAAI,IAAI,CAACoB,YAAY,EAAE;MACrBhB,YAAY,CAAC,IAAI,CAACgB,YAAY,CAAC;MAC/B,IAAI,CAACA,YAAY,GAAG7B,SAAS;;IAG/B,IACE,IAAI,CAACN,aAAa;IAClB;IACA,IAAI,CAACD,SAAS,CAAC2C,UAAU,KAAK7E,gBAAgB,CAAC8E,MAAM,EACrD;MACA,MAAMC,oBAAoB,GAAG,IAAI,CAAC5C,aAAa,CAACR,gBAAgB;MAChE;MACA+C,UAAU,GAAG,IAAIC,OAAO,CAAO,CAACC,OAAO,EAAEI,MAAM,KAAI;QACjD;QACA,IAAI,CAAC7C,aAAa,CAACR,gBAAgB,GAAGiC,GAAG,IAAG;UAC1CmB,oBAAoB,CAACnB,GAAG,CAAC;UACzBgB,OAAO,EAAE;QACX,CAAC;MACH,CAAC,CAAC;KACH,MAAM;MACL;MACA,IAAI,CAAChC,YAAY,CAAC7C,eAAe,CAACkB,QAAQ,CAAC;MAC3C,OAAO0D,OAAO,CAACC,OAAO,EAAE;;IAG1B,IAAIJ,KAAK,EAAE;MACT,IAAI,CAACrC,aAAa,EAAE8C,gBAAgB,EAAE;KACvC,MAAM,IAAIR,aAAa,EAAE;MACxB,IAAI,CAACd,oBAAoB,EAAE;;IAG7B,OAAOe,UAAU;EACnB;EAEA;;;;;;EAMOlB,eAAeA,CAAA;IACpB,IAAI,IAAI,CAACrB,aAAa,EAAE;MACtB,IAAI,CAACA,aAAa,CAACqB,eAAe,EAAE;;EAExC;EAEQG,oBAAoBA,CAAA;IAC1B;IACA,IAAI,IAAI,CAACxB,aAAa,EAAE;MACtB,IAAI,CAACA,aAAa,CAAC+C,OAAO,EAAE;;EAEhC;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoCOC,OAAOA,CAACC,MAAsB;IACnC,IAAI,CAACC,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAACgD,OAAO,CAACC,MAAM,CAAC;EACpC;EAEQC,gBAAgBA,CAAA;IACtB,IAAI,CAAC,IAAI,CAAC9C,SAAS,EAAE;MACnB,MAAM,IAAI+C,SAAS,CAAC,yCAAyC,CAAC;;EAElE;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCOC,eAAeA,CAACC,SAAiB,EAAEC,QAA2B;IACnE,IAAI,CAACJ,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAACoD,eAAe,CAACC,SAAS,EAAEC,QAAQ,CAAC;EACzD;EAEA;;;;;;;;;;;;;;;;;;;;;;;;EAwBOC,SAASA,CACdC,WAAmB,EACnBF,QAA6B,EAC7BG,OAAA,GAAwB,EAAE;IAE1B,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,OAAO,IAAI,CAAClD,aAAa,CAACuD,SAAS,CAACC,WAAW,EAAEF,QAAQ,EAAEG,OAAO,CAAC;EACrE;EAEA;;;;;;;;;;;;EAYOC,WAAWA,CAACC,EAAU,EAAEF,OAAA,GAAwB,EAAE;IACvD,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAAC0D,WAAW,CAACC,EAAE,EAAEF,OAAO,CAAC;EAC7C;EAEA;;;;;;EAMOG,KAAKA,CAACC,aAAsB;IACjC,IAAI,CAACX,gBAAgB,EAAE;IACvB;IACA,OAAO,IAAI,CAAClD,aAAa,CAAC4D,KAAK,CAACC,aAAa,CAAC;EAChD;EAEA;;;;;;;;;;;;EAYOC,MAAMA,CAACD,aAAqB;IACjC,IAAI,CAACX,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAAC8D,MAAM,CAACD,aAAa,CAAC;EAC1C;EAEA;;;;;;;;;;;EAWOE,KAAKA,CAACF,aAAqB;IAChC,IAAI,CAACX,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAAC+D,KAAK,CAACF,aAAa,CAAC;EACzC;EAEA;;;;;;;;;;;;;EAaOG,GAAGA,CACRC,SAAiB,EACjBC,cAAsB,EACtBT,OAAA,GAAwB,EAAE;IAE1B,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAACgE,GAAG,CAACC,SAAS,EAAEC,cAAc,EAAET,OAAO,CAAC;EAC5D;EAEA;;;;;;;;;;;;;EAaOU,IAAIA,CACTF,SAAiB,EACjBC,cAAsB,EACtBT,OAAA,GAAwB,EAAE;IAE1B,IAAI,CAACP,gBAAgB,EAAE;IACvB;IACA,IAAI,CAAClD,aAAa,CAACmE,IAAI,CAACF,SAAS,EAAEC,cAAc,EAAET,OAAO,CAAC;EAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}